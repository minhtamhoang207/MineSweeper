/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ClientController;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Player;
/**
 *
 * @author lvt11
 */
public class HomeView extends javax.swing.JFrame {
    DefaultTableModel onlineTableModel;
    DefaultTableModel rankTableModel;
    public ArrayList<Player> listPlayer = new ArrayList<>();
    public ArrayList<Player> listRankPlayer = new ArrayList<>();

    /**
     * Creates new form HomeView
     */
//    public HomeView()
//    {
//        initComponents();
//    }
    public HomeView() {
        initComponents();
        onlineTableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        playerTable.setModel(onlineTableModel);
        onlineTableModel.addColumn("Tên");
        onlineTableModel.addColumn("Điểm");
        onlineTableModel.addColumn("Trạng Thái");
        
        rankTableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        rankTable.setModel(rankTableModel);
        rankTableModel.addColumn("Hạng");
        rankTableModel.addColumn("Tên");
        rankTableModel.addColumn("Điểm");
        rankTableModel.addColumn("Điểm trung bình đối thủ");
        rankTableModel.addColumn("Thời gian trung bình");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rankTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        rankType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Average Point", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(playerTable);
        if (playerTable.getColumnModel().getColumnCount() > 0) {
            playerTable.getColumnModel().getColumn(0).setResizable(false);
            playerTable.getColumnModel().getColumn(1).setResizable(false);
            playerTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Người Chơi Online");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", jPanel1);

        rankTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Name", "Point", "Average Opponents Point", "Average Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        rankTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rankTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(rankTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Bảng Xếp Hạng");

        rankType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Điểm", "Điểm Trung Bình Đối Thủ", "Thời Gian Trung Bình" }));
        rankType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rankType, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(rankType, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Rank", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerTableMouseClicked
        // TODO add your handling code here:
//        int index = playerTable.getSelectedRow();
//        int dialogResult = JOptionPane.showConfirmDialog (this, "Thách đấu người chơi này?");
//        if(dialogResult == JOptionPane.YES_OPTION){
//            cc.openConnection();
//            cc.sendData("CHALLENGE_PLAYER", listPlayer.get(index).getUserName());
//        }
    }//GEN-LAST:event_playerTableMouseClicked

    private void rankTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rankTableMouseClicked
        // TODO add your handling code here:
        int index = rankTable.getSelectedRow();
//        rankTable.get
        System.out.println(index);
    }//GEN-LAST:event_rankTableMouseClicked

    private void rankTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankTypeActionPerformed
        // TODO add your handling code here:
        int type = rankType.getSelectedIndex();
        if(type == 0)
        {
            sortByPoint();
        }
        if(type == 1)
            
        {
            sortByAvgPointOpp();
        }
        if(type == 2)
        {
            sortByAvgTime();
        }
        setRankTable(listRankPlayer);
    }//GEN-LAST:event_rankTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeView().setVisible(true);
                
            }
        });
    }
    public DefaultTableModel getOnlineTableModel()
    {
        return onlineTableModel;
    }
    public DefaultTableModel getRankTableModel()
    {
        return rankTableModel;
    }
    public JTable getPlayerTable()
    {
        return playerTable;
    }
    public JTable getRankTable()
    {
        return rankTable;
    }
    public JComboBox<String> getRankTypeCb()
    {
        return rankType;
    }
    public void setOnlineTable(List<Player> players) {
        onlineTableModel.setRowCount(0);
        for (Player player : players) {
            onlineTableModel.addRow(new Object[]{player.getUserName(), player.getPoint(), player.getStatus() });
        }
    }
    public void setRankTable(List<Player> players)
    {
        rankTableModel.setRowCount(0);
        for(int i = 0; i < players.size(); i++)
        {
            rankTableModel.addRow(new Object[]{i+1, players.get(i).getUserName(), players.get(i).getPoint(), players.get(i).getAvgPointOpp(), players.get(i).getAvgTime()});
        }
    }
    public void sortByPoint() // sắp xêp bảng xếp hạng theo điểm
    {
        Collections.sort(listRankPlayer, (Player p1, Player p2) -> p1.getPoint() > p2.getPoint() ? -1 : (p1.getPoint() < p2.getPoint()) ? 1 : 0 // -1 - less than, 1 - greater than, 0 - equal, all inversed for descending
        );
        setRankTable(listRankPlayer);

    }
    public void sortByAvgPointOpp() // sắp xêp bảng xếp hạng theo điểm trung bình đối thủ
    {
        Collections.sort(listRankPlayer, (Player p1, Player p2) -> p1.getAvgPointOpp() > p2.getAvgPointOpp() ? -1 : (p1.getAvgPointOpp() < p2.getAvgPointOpp()) ? 1 : 0 // -1 - less than, 1 - greater than, 0 - equal, all inversed for descending
        );
        setRankTable(listRankPlayer);
    }
    public void sortByAvgTime()// sắp xêp bảng xếp hạng theo thời gian kết thúc trung bình
    { 
        DateFormat formatter = new SimpleDateFormat("hh:mm:ss");
        Date time;
        try {
            if(!listRankPlayer.isEmpty()){
                time = (Date)formatter.parse(listRankPlayer.get(0).getAvgTime());
                System.out.println(time);
            }
        } catch (ParseException ex) {
            Logger.getLogger(HomeView.class.getName()).log(Level.SEVERE, null, ex);
        }
        Collections.sort(listRankPlayer, (Player p1, Player p2) -> p1.getAvgTime().compareTo(p2.getAvgTime()) < 0 ? -1 : (p1.getAvgTime().compareTo(p2.getAvgTime()) > 0) ? 1 : 0 // -1 - less than, 1 - greater than, 0 - equal, all inversed for descending
        );
        setRankTable(listRankPlayer);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable playerTable;
    private javax.swing.JTable rankTable;
    private javax.swing.JComboBox<String> rankType;
    // End of variables declaration//GEN-END:variables
}
